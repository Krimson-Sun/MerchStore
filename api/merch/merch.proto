syntax = "proto3";

package merch_store.api.merch;

option go_package = "merch-store/pkg/merch;merch";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Merch Store API"
      version: "1.0.0"
      description: "API for Merch Store service"
    };
    consumes: "application/json"
    produces: "application/json"
    base_path: "/api"
    schemes: HTTP
    schemes: HTTPS
    security_definitions: {
      security: {
        key: "Bearer"
        value: {
          type: TYPE_API_KEY
          in: IN_HEADER
          name: "x-access-token"
          description: "Bearer token for authentication"
        }
      }
    }
    security: {
      security_requirement: {
        key: "Bearer"
        value: {
  
        }
      }
    }
  };
  
  message User {
    string id = 1;
    string email = 2;
    string first_name = 3;
    string last_name = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
  }
  
  service UserService {
    // Метод для создания пользователя
    rpc CreateUser(CreateUserRequest) returns (UserResponse) {
      option (google.api.http) = {
        post: "/v1/users"
        body: "*"
      };
    }
    
    // Метод для получения пользователя по ID
    rpc GetUser(GetUserRequest) returns (UserResponse) {
      option (google.api.http) = {
        get: "/v1/users/{user_id}"
      };
    }
    
      // Метод для получения текущего пользователя
      rpc GetMe(google.protobuf.Empty) returns (UserResponse) {
        option (google.api.http) = {
          get: "/v1/users/me"
        };
      }
  
    // Метод для обновления данных пользователя
    rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
      option (google.api.http) = {
        put: "/v1/users"
        body: "*"
      };
    }
  }
  
  message CreateUserRequest {
    string email = 1 [
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string.email = true
    ];
    string password = 2 [
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string.min_len = 8
    ];
    optional string first_name = 3;
    optional string last_name = 4;
  }
  
  message GetUserRequest {
    string user_id = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
  }
  
  message UpdateUserRequest {
    optional string first_name = 4 [
      (validate.rules).string.min_len = 1
    ];
    optional string last_name = 5 [
      (validate.rules).string.min_len = 1
    ];
  }
  
  message DeleteUserRequest {
    string user_id = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
  }
  
  message UserResponse {
    User user = 1;
  }
  
  service AuthService {
    // Метод для получения токенов доступа и обновления
    rpc Login(LoginRequest) returns (LoginResponse) {
      option (google.api.http) = {
        post: "/v1/auth/login"
        body: "*"
      };
    }
  
    // Метод для обновления токенов доступа и обновления
    rpc Refresh(RefreshRequest) returns (RefreshResponse) {
      option (google.api.http) = {
        post: "/v1/auth/refresh"
        body: "*"
      };
    }
  
    // Метод для инвалидации токена обновления
    rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v1/auth/logout"
        body: "*"
      };
    }
  }
  
  message TokensPair {
    string access_token = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
    string refresh_token = 2 [
      (google.api.field_behavior) = REQUIRED
    ];
  }
  
  message LoginRequest {
    string email = 1 [
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string.email = true
    ];
    string password = 2 [
      (google.api.field_behavior) = REQUIRED
    ];
  }
  
  message LoginResponse {
    TokensPair tokens = 1;
  }
  
  message RefreshRequest {
    TokensPair tokens = 1;
  }
  
  message RefreshResponse {
    TokensPair tokens = 1;
  }
  
  message LogoutRequest {
    string refresh_token = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
  }

  service MerchService {
    rpc GetCatalog(GetCatalogRequest) returns (GetCatalogResponse) {
      option (google.api.http) = {
        post: "/v1/catalog"
      };
    }

    rpc GetItem(GetItemRequest) returns (Item) {
      option (google.api.http) = {
        get: "/v1/items/{item_id}"
      };
    }

    rpc CreateItem(CreateItemRequest) returns (Item) {
      option (google.api.http) = {
        post: "/v1/items"
        body: "*"
      };
    }
    
    rpc UpdateItem(UpdateItemRequest) returns (Item) {
      option (google.api.http) = {
        put: "/v1/items/{item_id}"
        body: "*"
      };
    }
    
    rpc DeleteItem(DeleteItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/items/{item_id}"
      };
    }
  }

  message DeleteItemRequest {
    string item_id = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
  }

  message UpdateItemRequest {
    string item_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional string image_url = 4;
    optional int32 price = 5
    [
      (validate.rules).int32 = {
        gt = 0
      }
    ];
    optional int32 in_stock = 6
    [
      (validate.rules).int32 = {
        gt = 0
      }
    ];
  }

  
  message CreateItemRequest {
    string name = 1 [
      (google.api.field_behavior) = REQUIRED
    ];
    optional string description = 2;
    string image_url = 3;
    int32 price = 4
    [
      (validate.rules).int32 = {
        gt = 0
      }
    ];
    int32 in_stock = 5
    [
      (validate.rules).int32 = {
        gt = 0
      }
    ];
    } 
  
  message GetItemRequest {
    string item_id = 1
    [
      (google.api.field_behavior) = REQUIRED
    ];
  }

  message GetCatalogRequest {
    Pagination pagination = 1;
  }
  
  message Pagination {
    int32 page = 1;
    int32 size = 2;
  }

  message GetCatalogResponse {
    repeated Item items = 1;
  }

  message Item {
    string id = 1;
    string name = 2;
    string description = 3;
    string image_url = 4;
    int32 price = 5;
    int32 in_stock = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
  }


  service CartService {
    rpc AddItem(AddItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v1/cart"
        body: "*"
      };
    }

    rpc RemoveItem(RemoveItemRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/cart/{item_id}"
      };
    }
    
    rpc GetCart(google.protobuf.Empty) returns (GetCartResponse) {
      option (google.api.http) = {
        get: "/v1/cart"
      };
    }
    
    rpc ClearCart(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/cart"
      };
    }

    rpc GetCartTotal(google.protobuf.Empty) returns (GetCartTotalResponse) {
      option (google.api.http) = {
        get: "/v1/cart/total"
      };
    }
    }

  message AddItemRequest {
    string item_id = 1;
    int32 quantity = 2;
  }

  message RemoveItemRequest {
    string item_id = 1;
  }

  message GetCartResponse {
    repeated Item items = 1;
    int32 total_quantity = 2;
    int32 total_price = 3;
  }

  message GetCartTotalResponse {
    int32 total_quantity = 1;
    int32 total_price = 2;
  }
  
  
